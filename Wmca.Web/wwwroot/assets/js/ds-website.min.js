/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/wmcads/components/accordion/_example.js":
/*!*****************************************************!*\
  !*** ./src/wmcads/components/accordion/_example.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var accordionsJS = function accordionsJS() {
  var accordions = document.querySelectorAll('.ds-accordion');
  accordions.forEach(function (accordion) {
    var accordionBtn = accordion.querySelector('.ds-accordion__summary-wrapper');
    var toggleAccordion = function toggleAccordion() {
      if (accordion.classList.contains('ds-is--open')) {
        accordion.classList.remove('ds-is--open');
        accordionBtn.setAttribute('aria-expanded', false);
      } else {
        accordion.classList.add('ds-is--open');
        accordionBtn.setAttribute('aria-expanded', true);
      }
    };
    accordionBtn.addEventListener('click', toggleAccordion);
  });
};
/* harmony default export */ __webpack_exports__["default"] = (accordionsJS);

/***/ }),

/***/ "./src/wmcads/patterns/board-members/_example.js":
/*!*******************************************************!*\
  !*** ./src/wmcads/patterns/board-members/_example.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var boardMembersJS = function boardMembersJS() {
  // get all the 'trigger' elements on the page
  var triggers = Array.from(document.querySelectorAll('[data-toggle="collapse"]'));

  // map commands to the classList methods
  var fnmap = {
    toggle: 'toggle',
    show: 'add',
    hide: 'remove'
  };
  var collapse = function collapse(selector, cmd) {
    var targets = Array.from(document.querySelectorAll(selector));
    targets.forEach(function (target) {
      target.classList[fnmap[cmd]]('show');
    });
  };
  var tabs = document.querySelectorAll('ul.ds-board-members-tab-labels > li');
  var panelQuestions = document.querySelectorAll('.ds-board-members-panel-question');
  var onTabClick = function onTabClick(e) {
    e.preventDefault();
    tabs.forEach(function (tab) {
      tab.classList.remove('active');
    });
    var clickedTab = e.currentTarget;
    clickedTab.classList.add('active');
    var tabsPanel = document.querySelectorAll('.ds-board-members-single-panel');
    tabsPanel.forEach(function (panel) {
      panel.classList.remove('active');
    });
    var anchorRef = e.target;
    var activePanelId = anchorRef.getAttribute('href');
    var activePanel = document.querySelector(activePanelId);
    activePanel.classList.add('active');
  };
  var onQuestionClick = function onQuestionClick(e) {
    e.preventDefault();
    tabs.forEach(function (tab) {
      tab.classList.remove('active');
    });
    tabs[1].classList.add('active');
    var tabsPanel = document.querySelectorAll('.ds-board-members-single-panel');
    var tab2 = document.querySelector('#tab-2');
    tabsPanel.forEach(function (panel) {
      panel.classList.remove('active');
    });
    tab2.classList.add('active');
    var tabQuestion = document.querySelectorAll('.ds-board-members-panel-content');
    tabQuestion.forEach(function (question) {
      question.classList.remove('active');
    });
    var questionAnchor = e.target;
    var activeQuestion = questionAnchor.getAttribute('href');
    var AnswerPanel = document.querySelector(activeQuestion);
    AnswerPanel.classList.add('active');
  };
  tabs.forEach(function (tab) {
    tab.addEventListener('click', onTabClick);
  });
  panelQuestions.forEach(function (question) {
    question.addEventListener('click', onQuestionClick);
  });

  // listen to click events that occuor
  // only on our triggers
  window.addEventListener('click', function (ev) {
    var elm = ev.target;
    if (triggers.includes(elm)) {
      ev.preventDefault();
      var selector = elm.getAttribute('data-target');
      collapse(selector, 'toggle');
      if (elm.getAttribute('aria-expanded') === 'false') {
        elm.setAttribute('aria-expanded', 'true');
      } else {
        elm.setAttribute('aria-expanded', 'false');
      }
    }
  }, false);
};
/* harmony default export */ __webpack_exports__["default"] = (boardMembersJS);

/***/ }),

/***/ "./src/wmcads/patterns/cookies/_example.js":
/*!*************************************************!*\
  !*** ./src/wmcads/patterns/cookies/_example.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var cookies = function cookies() {
  var cookiesBanner = document.querySelector('header .ds-cookies-banner');
  if (cookiesBanner) {
    var hideCookieBanner = function hideCookieBanner() {
      cookiesBanner.style.display = 'none';
    };
    var showCookieBanner = function showCookieBanner() {
      var codeExample = document.querySelector('.ds-website-code-example .ds-cookies-banner');
      cookiesBanner.style.display = 'block';
      if (codeExample) codeExample.style.display = 'block'; // Ensure the cookie banner in the component example stays visible even if the user has already accepted cookies
    };

    // Set cookie based on name, value and expiry date supplied
    var setCookie = function setCookie(cname, cvalue, exdays) {
      var d = new Date();
      d.setTime(d.getTime() + exdays * 24 * 60 * 60 * 1000);
      var expires = "expires=".concat(d.toUTCString());
      var domain = "domain=".concat(window.location.hostname);
      document.cookie = "".concat(cname, "=").concat(cvalue, ";").concat(expires, ";").concat(domain, ";path=/");
    };

    // Get cookie based on name supplied
    var getCookie = function getCookie(cname) {
      var name = "".concat(cname, "=");
      var ca = document.cookie.split(';');
      for (var i = 0; i < ca.length; i += 1) {
        var c = ca[i];
        while (c.charAt(0) === ' ') {
          c = c.substring(1);
        }
        if (c.indexOf(name) === 0) {
          return c.substring(name.length, c.length);
        }
      }
      return '';
    };

    // Check if cookie(s) created or not
    var checkCookie = function checkCookie(cname) {
      var isCookieCreated = getCookie(cname);
      if (isCookieCreated === '') {
        return false;
      }
      return true;
    };
    var getCookiePolicy = function getCookiePolicy() {
      return JSON.parse(getCookie('cookies-policy'));
    };
    var updateCookiePreferences = function updateCookiePreferences() {
      if (document.querySelector('.ds-cookies-manager__preferences')) {
        hideCookieBanner();
        var cookiesOptions = document.querySelector('.ds-cookies-manager__preferences').querySelectorAll('.ds-fe-checkboxes__input');
        var currentOptions = [getCookiePolicy().essential, getCookiePolicy().functional, getCookiePolicy().performance];
        for (var i = 0; i < cookiesOptions.length; i += 1) {
          cookiesOptions[i].checked = currentOptions[i];
        }
      }
    };
    var setCookiePolicy = function setCookiePolicy(essentialValue, functionalValue, performanceValue) {
      var cookieValue = {
        essential: essentialValue,
        functional: functionalValue,
        performance: performanceValue
      };
      setCookie('cookies-policy', JSON.stringify(cookieValue), 181);
      updateCookiePreferences();
    };
    var acceptAllCookies = function acceptAllCookies() {
      setCookiePolicy(true, true, true);
      setCookie('cookies-preference', true, 181);
      hideCookieBanner();
    };
    var savePreferences = function savePreferences() {
      if (document.querySelector('.ds-cookies-manager__form')) {
        var elements = document.querySelector('.ds-cookies-manager__form').querySelectorAll('.ds-fe-checkboxes__input');
        var selectedOptions = [];
        for (var i = 0; i < elements.length; i += 1) {
          selectedOptions[i] = elements.item(i).checked;
        }
        setCookiePolicy.apply(void 0, selectedOptions);
        setCookie('cookies-preference', true, 181);
      }
    };
    var cookiesScan = function cookiesScan() {
      // if cookies-preference doesn't exist, show cookie banner
      if (!checkCookie('cookies-preference')) {
        showCookieBanner();
        setCookiePolicy(true, false, false);
      }

      // verify if we are at Cookies Manager page and update the selected options to match the already created cookie
      updateCookiePreferences();
    };
    var isInIframe = window.frameElement && window.frameElement.nodeName === 'IFRAME'; // check if we are in an iframe

    // Creation of default Cookies permissions when the DOM is fully loaded
    if (!isInIframe) document.addEventListener('DOMContentLoaded', cookiesScan);

    // When Accept all cookies button is triggered
    var acceptAllCookiesBtn = document.querySelector('.ds-cookies-banner__accept-all-cookies');
    if (!isInIframe) {
      acceptAllCookiesBtn.addEventListener('click', acceptAllCookies);
      acceptAllCookiesBtn.addEventListener('keydown', function (event) {
        if (event.key === ' ' || event.key === 'Enter' || event.key === 'Spacebar') {
          event.preventDefault();
          acceptAllCookies();
        }
      });
    }

    // When Safe Preferences button is triggered
    var cookieForm = document.querySelector('.ds-cookies-manager__form');
    if (cookieForm) cookieForm.addEventListener('submit', savePreferences);
  }
};
/* harmony default export */ __webpack_exports__["default"] = (cookies);

/***/ }),

/***/ "./src/wmcads/patterns/footer/_example.js":
/*!************************************************!*\
  !*** ./src/wmcads/patterns/footer/_example.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var footerJs = function footerJs() {
  var collapseMenus = document.querySelectorAll('.ds-collapse-heading');
  var eventListenersAdded = false;
  var handleMobileFooter = function handleMobileFooter() {
    var windowWidth = window.innerWidth;
    if (windowWidth < 768 && !eventListenersAdded) {
      eventListenersAdded = true; // Stop multiple event listeners being added as collapse functionality forces 'resize' call on window.

      collapseMenus.forEach(function (collapseToggle) {
        var toggleActive = false;
        var panel = document.getElementById(collapseToggle.getAttribute('aria-controls'));
        var handleToggle = function handleToggle() {
          if (toggleActive) {
            collapseToggle.setAttribute('aria-expanded', 'true');
            panel.style.maxHeight = "".concat(panel.scrollHeight, "px");
          } else {
            collapseToggle.setAttribute('aria-expanded', 'false');
            panel.style.maxHeight = null;
          }
        };
        handleToggle();
        collapseToggle.addEventListener('click', function () {
          toggleActive = !toggleActive;
          handleToggle();
        });

        // if tab is used automaticaly open collapse headings
        var handleKeydown = function handleKeydown(e, key) {
          e.stopPropagation();
          if (key === 9) {
            var collapseToggleButton = document.querySelectorAll('.ds-collapse-heading');
            var handleToggleButton = function handleToggleButton() {
              collapseToggleButton[0].setAttribute('aria-expanded', 'true');
              collapseToggleButton[1].setAttribute('aria-expanded', 'true');
              panel.style.maxHeight = "".concat(panel.scrollHeight, "px");
            };
            handleToggleButton();
          }
        };

        // if tab is used open menu
        var collapseButton = document.querySelectorAll('.ds-footer__collapse-button');

        // eslint-disable-next-line no-restricted-syntax
        var _iterator = _createForOfIteratorHelper(collapseButton),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var i = _step.value;
            i.addEventListener('keydown', function (e) {
              handleKeydown(e, e.keyCode);
            });
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      });
    }
  };
  // init mobile nav function
  handleMobileFooter();
  window.addEventListener('resize', handleMobileFooter);
};
/* harmony default export */ __webpack_exports__["default"] = (footerJs);

/***/ }),

/***/ "./src/wmcads/patterns/header-v2/_example.js":
/*!***************************************************!*\
  !*** ./src/wmcads/patterns/header-v2/_example.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var headerJs = function headerJs() {
  // get mega menu elements
  var megaMenus = document.querySelectorAll('.ds-mega-menu');
  var mobileMenu = window.matchMedia('(max-width: 767px)');

  /*
      Mega menu helper functions
  */

  // getMenuLink returns a specified menu link from a specified array
  // currentIndex = index of the link that is currently focused
  // array = array to move through
  // direction = next, prev,
  var getMenuLink = function getMenuLink(currentIndex, array, direction) {
    var menuLink = null;
    if (array) {
      if (direction === 'prev') {
        // return previous link in specified array if there is one else return null;
        menuLink = array[currentIndex - 1] ? array[currentIndex - 1] : null;
      } else if (direction === 'next') {
        // return next link in specified array if there is one else return null;
        menuLink = array[currentIndex + 1] ? array[currentIndex + 1] : null;
      } else {
        // return link with same index in specified array;
        menuLink = array[currentIndex] ? array[currentIndex] : array[array.length - 1];
      }
    }
    return menuLink;
  };

  // takes a menu element and allows moving between focus via tabbing/arrows
  var setKeyboardNavigation = function setKeyboardNavigation(subMenuContainer, subMenuQuery, onFirst, onLast) {
    // array of all links in menu container
    var allLinksArray = [];

    // use specified query to select all submenus
    var subMenus = subMenuContainer.querySelectorAll(subMenuQuery);
    subMenus.forEach(function (subMenu, subMenuIndex) {
      var thisSubMenuLinks = subMenu.querySelectorAll('a');

      // add list of all links in this container to an array
      allLinksArray.push(thisSubMenuLinks);

      // add event listener to each link with key logic
      thisSubMenuLinks.forEach(function (link, linkIndex) {
        link.addEventListener('keydown', function (e) {
          // if not escape
          if (e.keyCode !== 27) {
            e.stopPropagation();
            if (e.keyCode === 39) {
              // right arrow - go to link of same index in next menu list
              e.preventDefault();
              var nextMenuLink = getMenuLink(linkIndex, allLinksArray[subMenuIndex + 1]);
              if (nextMenuLink) nextMenuLink.focus();
            } else if (e.keyCode === 37) {
              // left arrow - go to link of same index in previous menu list
              e.preventDefault();
              var prevMenuLink = getMenuLink(linkIndex, allLinksArray[subMenuIndex - 1]);
              if (prevMenuLink) prevMenuLink.focus();
            } else if (e.keyCode === 40 || e.keyCode === 9 && !e.shiftKey) {
              // down arrow or tab - go to next link in current menu list
              e.preventDefault();
              // if next link doesn't exist try next menu first item else return null
              var nextLink = getMenuLink(linkIndex, thisSubMenuLinks, 'next') ? getMenuLink(linkIndex, thisSubMenuLinks, 'next') : getMenuLink(-1, allLinksArray[subMenuIndex + 1], 'next');
              if (nextLink) {
                nextLink.focus();
              } else if (onLast) {
                onLast();
              }
            } else if (e.keyCode === 38 || e.shiftKey && e.keyCode === 9) {
              // up arrow or shift + tab - go to previous item in current menu list
              e.preventDefault();
              var prevMenu = allLinksArray[subMenuIndex - 1];
              var prevLink = null;
              if (prevMenu || linkIndex > 0) {
                prevLink = getMenuLink(linkIndex, thisSubMenuLinks, 'prev') ? getMenuLink(linkIndex, thisSubMenuLinks, 'prev') : getMenuLink(prevMenu.length, prevMenu, 'prev');
              }
              if (prevLink) {
                prevLink.focus();
              } else if (onFirst) {
                onFirst();
              }
            }
          }
        });
      });
    });
  };
  megaMenus.forEach(function (menu) {
    var clearActiveListItems = function clearActiveListItems() {
      // remove active classes from other list items
      menu.querySelectorAll('.ds-mega-menu__primary-menu-item').forEach(function (menuItem) {
        menuItem.classList.remove('active');
      });
    };

    // handle setting the active class on menu and list items
    var setMenuActive = function setMenuActive(element) {
      var active = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var onCloseFocusElement = arguments.length > 2 ? arguments[2] : undefined;
      if (active) {
        menu.classList.add('active');
        clearActiveListItems();
        // add active class to current item
        element.classList.add('active');
      } else {
        menu.classList.remove('active');
        element.classList.remove('active');
        // set focus on menu close

        if (onCloseFocusElement) onCloseFocusElement.focus();
      }
    };

    // mobile nav function
    function handleMobileMenu(mq) {
      if (mq.matches) {
        var mobileToggle = menu.querySelector('.ds-mega-menu__mobile-toggle');
        var headerEl = menu.parentNode.parentNode;
        var topLevelMenuBtn = menu.querySelectorAll('.ds-mega-menu__link-arrow-icon-btn');
        var searchBtn = menu.querySelector('.ds-mega-menu__search-btn');
        // object to see which menu/menu level is open
        var mobileMenuIsOpen = {
          menu: false,
          primary: false,
          search: false
        };

        // handle mobile menu toggle
        mobileToggle.addEventListener('click', function () {
          mobileMenuIsOpen.menu = !mobileMenuIsOpen.menu;
          if (mobileMenuIsOpen.menu) {
            mobileMenuIsOpen.search = false;
            headerEl.classList.remove('ds-header--search-open');
            headerEl.classList.add('ds-header--mega-menu-open');
            document.querySelector('html').classList.add('mobile-menu-open');
          } else {
            headerEl.classList.remove('ds-header--mega-menu-open', 'ds-header--mega-menu-submenu-open');
            document.querySelector('html').classList.remove('mobile-menu-open');
          }
        });
        var showSearch = function showSearch() {
          mobileMenuIsOpen.search = !mobileMenuIsOpen.search;
          if (mobileMenuIsOpen.search) {
            mobileMenuIsOpen.menu = false;
            headerEl.classList.remove('ds-header--mega-menu-open', 'ds-header--mega-menu-submenu-open');
            document.querySelector('html').classList.remove('mobile-menu-open');
            headerEl.classList.add('ds-header--search-open');
          } else {
            headerEl.classList.remove('ds-header--search-open');
          }
        };
        if (searchBtn) {
          searchBtn.addEventListener('click', function () {
            showSearch();
          });
          searchBtn.addEventListener('keyup', function (event) {
            if (event.key === 'Enter') {
              showSearch();
            }
          });
        }

        // handle sub menu open/close
        topLevelMenuBtn.forEach(function (menuBtn) {
          var handleSubMenus = function handleSubMenus() {
            mobileMenuIsOpen.primary = !mobileMenuIsOpen.primary;
            var targetListItem = menuBtn.parentNode;
            if (mobileMenuIsOpen.primary) {
              targetListItem.classList.add('open');
              targetListItem.querySelector('.ds-mega-menu__sub-menu-link').focus();
              headerEl.classList.add('ds-header--mega-menu-submenu-open');
            } else {
              targetListItem.classList.remove('open');
              headerEl.classList.remove('ds-header--mega-menu-submenu-open');
            }
          };
          menuBtn.previousElementSibling.addEventListener('click', handleSubMenus);
          menuBtn.addEventListener('click', handleSubMenus);
        });

        // mobile collapse for third level menus
        var collapseMenus = menu.querySelectorAll('.ds-mega-menu__sub-menu-item .ds-mega-menu__collapse-toggle');
        collapseMenus.forEach(function (collapseToggle) {
          var handleThirdLevelMenus = function handleThirdLevelMenus() {
            var panel = collapseToggle.nextElementSibling;
            collapseToggle.classList.toggle('open');
            if (panel.style.maxHeight) {
              panel.style.maxHeight = null;
            } else {
              panel.style.maxHeight = "".concat(panel.scrollHeight, "px");
            }
          };
          if (collapseToggle.previousElementSibling.tagName !== 'A') {
            collapseToggle.previousElementSibling.addEventListener('click', handleThirdLevelMenus);
          }
          collapseToggle.addEventListener('click', handleThirdLevelMenus);
        });
      }
    }
    // end mobile nav function

    // init mobile nav function
    handleMobileMenu(mobileMenu);
    mobileMenu.addListener(handleMobileMenu);
    var topLevelLinks = menu.querySelectorAll('.ds-mega-menu__primary-menu-link');
    var menuDelay = false;
    var enterTimeOut;
    var leaveTimeOut;
    var delayTime = 300;

    // handle events within each top level list item
    topLevelLinks.forEach(function (topLevelLink, topLevelLinkIndex) {
      // return list item parent of the current link if it exists else return the link
      var topLevelListItem = topLevelLink.parentNode.tagName === 'LI' || topLevelLink.parentNode.className.includes('ds-mega-menu__search') ? topLevelLink.parentNode : topLevelLink;
      var subMenuLinks = topLevelListItem.querySelectorAll('.ds-mega-menu__sub-menu-link');

      // check if level 3 menus are present, if so add modifier class
      var hasSubmenuChildren = topLevelListItem.querySelectorAll('.ds-mega-menu__sub-menu-child-menu').length !== 0;
      if (hasSubmenuChildren) {
        topLevelListItem.querySelectorAll('.ds-mega-menu__sub-menu').forEach(function (subMenu) {
          subMenu.classList.add('ds-mega-menu__sub-menu--has-child-menus');
        });
      }
      var openSubMenu = function openSubMenu(e) {
        // check if list item has a mega menu
        if (topLevelListItem.querySelectorAll('.ds-mega-menu__container').length) {
          e.preventDefault();
          // remove keyFocus to allow menu to show
          setMenuActive(topLevelListItem, true);
          // focus first menu item
          if (topLevelListItem.contains(subMenuLinks[0])) {
            subMenuLinks[0].focus();
          } else if (topLevelListItem.querySelector('.ds-search-bar__input')) {
            topLevelListItem.querySelector('.ds-search-bar__input').focus();
          }
        }
      };
      var handleKeydown = function handleKeydown(e, key) {
        e.stopPropagation();
        // enable keyboard navigation only when search input is not active
        var searchInput = document.querySelector('.ds-search-bar__input');
        if (searchInput !== document.activeElement) {
          // if key pressed is enter, space bar or down arrow
          if (key === 13 || key === 32 || key === 40) {
            // enter
            // check if link exists
            if (key === 13) {
              if (!topLevelLink.tagName === 'a' || !topLevelLink.getAttribute('href')) {
                openSubMenu(e);
              }
            } else {
              openSubMenu(e);
            }
          } else if (key === 37) {
            // left arrow
            var prevLink = getMenuLink(topLevelLinkIndex, topLevelLinks, 'prev');
            if (prevLink) prevLink.focus();
          } else if (key === 39) {
            // right arrow
            var nextLink = getMenuLink(topLevelLinkIndex, topLevelLinks, 'next');
            if (nextLink) nextLink.focus();
          } else if (key === 27) {
            // if escape pressed
            setMenuActive(topLevelListItem, false, topLevelLink);
          }
        }
      };

      // if top level link doesn't have a mega-menu child add class to menu to hide overlay when hovered
      // has to be added/removed on mouseover to cover menus that have a mix of items with/without mega menus
      var isTopLevelWithMenu = topLevelListItem.querySelectorAll('.ds-mega-menu__container').length;
      if (isTopLevelWithMenu) {
        topLevelLink.addEventListener('mouseover', function () {
          if (!menuDelay) {
            // if no menuDelay is active just open the menu
            setMenuActive(topLevelListItem);
          } else {
            // if menuDelay is active, clear all timeouts and start a new one
            clearTimeout(enterTimeOut);
            clearTimeout(leaveTimeOut);
            enterTimeOut = setTimeout(function () {
              // enter timeout completed, open menu and kill delay
              menuDelay = false;
              setMenuActive(topLevelListItem);
            }, delayTime);
          }
        });
        topLevelListItem.querySelector('.ds-mega-menu__container').addEventListener('mouseover', function () {
          if (menuDelay) {
            // if container is rehovered before timeout is done, clear all timeouts kill the delay
            clearTimeout(enterTimeOut);
            clearTimeout(leaveTimeOut);
            menuDelay = false;
          }
        });
        topLevelListItem.addEventListener('mouseleave', function () {
          menuDelay = true;
          // leave timeout is active
          leaveTimeOut = setTimeout(function () {
            // leave timeout completed, close menu
            setMenuActive(topLevelListItem, false);
            menuDelay = false;
          }, delayTime);
        });
        topLevelListItem.addEventListener('blur', setMenuActive(topLevelListItem, false));
      }
      topLevelListItem.addEventListener('keydown', function (e) {
        handleKeydown(e, e.keyCode);
      });

      // top lvl link event listeners
      topLevelLink.addEventListener('focus', function (e) {
        e.preventDefault();
        setMenuActive(topLevelListItem, false);
        clearActiveListItems();
      });
      topLevelLink.addEventListener('mousedown', function (e) {
        // prevent link focus on click
        e.preventDefault();
      });

      // set up keyboard navigation for sub menu links
      var subMenuContainer = topLevelListItem.querySelector('.ds-mega-menu__sub-menu');
      if (subMenuContainer) {
        setKeyboardNavigation(subMenuContainer, '.ds-mega-menu__sub-menu-item',
        // what to do on first link
        function () {
          return topLevelLink.focus();
        },
        // what to do on last link
        function () {
          setMenuActive(topLevelListItem, false);
          if (getMenuLink(topLevelLinkIndex, topLevelLinks, 'next')) {
            getMenuLink(topLevelLinkIndex, topLevelLinks, 'next').focus();
          }
        });
      }
    });

    // set up keyboard navigation for search menu links
    var searchMenuContainer = menu.querySelector('.ds-search-container');
    if (searchMenuContainer) {
      setKeyboardNavigation(searchMenuContainer, '.ds-search-list',
      // what to do on first link
      function () {
        return menu.querySelector('.ds-search-bar__input').focus();
      },
      // what to do on last link
      function () {
        return setMenuActive(menu.querySelector('.ds-mega-menu__search'), false, menu.querySelector('.ds-mega-menu__search-btn'));
      });
    }
  });
};
/* harmony default export */ __webpack_exports__["default"] = (headerJs);

/***/ }),

/***/ "./src/wmcads/patterns/search/search-filter/_example.js":
/*!**************************************************************!*\
  !*** ./src/wmcads/patterns/search/search-filter/_example.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var searchFilterJs = function searchFilterJs() {
  var showBtn = document.getElementById('show_filter_btn');
  var hideBtn = document.getElementById('hide_filter_btn');
  var showResults = document.getElementById('show_results_btn');
  var searchFilter = document.getElementById('search_filter');
  if (searchFilter) {
    var filterOptions = searchFilter.querySelectorAll('.ds-fe-checkboxes__input');
    filterOptions.forEach(function (option) {
      option.addEventListener('change', function () {
        if (_toConsumableArray(filterOptions).some(function (input) {
          return input.checked;
        })) {
          searchFilter.classList.add('ds-search-filter--has-inputs-checked');
        } else {
          searchFilter.classList.remove('ds-search-filter--has-inputs-checked');
        }
      });
    });
    var showFilter = function showFilter() {
      var show = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      if (show) {
        searchFilter.classList.add('ds-search-filter--is-open');
        searchFilter.setAttribute('aria-expanded', 'true');
      } else {
        searchFilter.classList.remove('ds-search-filter--is-open');
        searchFilter.setAttribute('aria-expanded', 'false');
      }
    };
    var clearFilters = function clearFilters() {
      filterOptions.forEach(function (option) {
        option.checked = false; // eslint-disable-line no-param-reassign
      });

      searchFilter.classList.remove('ds-search-filter--has-inputs-checked');
    };
    showBtn.addEventListener('click', function (e) {
      e.preventDefault();
      showFilter();
    });
    hideBtn.addEventListener('click', function (e) {
      e.preventDefault();
      showFilter(false);
    });
    document.querySelectorAll('.ds-search-filter__clear-all').forEach(function (clearBtn) {
      clearBtn.addEventListener('click', function (e) {
        e.preventDefault();
        clearFilters();
      });
    });
    showResults.addEventListener('click', function () {
      return showFilter(false);
    });
  }
};
/* harmony default export */ __webpack_exports__["default"] = (searchFilterJs);

/***/ }),

/***/ "./src/www/_partials/component-example/_component-example-iframe.js":
/*!**************************************************************************!*\
  !*** ./src/www/_partials/component-example/_component-example-iframe.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var iframe_resizer_js_iframeResizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! iframe-resizer/js/iframeResizer */ "./node_modules/iframe-resizer/js/iframeResizer.js");
/* harmony import */ var iframe_resizer_js_iframeResizer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(iframe_resizer_js_iframeResizer__WEBPACK_IMPORTED_MODULE_0__);
 // Import iframe resizer logic

var componentExampleIframe = function componentExampleIframe() {
  var iframeExamples = document.querySelectorAll('.ds-website-code-example__iframe');
  iframeExamples.forEach(function (iframeElement) {
    var ifrm = iframeElement;

    // get iframe content
    var html = ifrm.dataset.src;
    // clear unnecessary html
    ifrm.innerHTML = '';
    var host = "//".concat(window.location.host);
    var ajax = new XMLHttpRequest();
    ajax.open('GET', "".concat(host, "https://cloudcdn.wmca.org.uk/designsystem/0.0.3/img/ds-icons.min.svg"), true); // Fire off ajax to get spritesheet
    ajax.send();
    // When spritesheet has loaded
    ajax.onload = function () {
      // CONSTRUCT HTML TO INJECT IN IFRAME
      var svgSprite = "<div style=\"display:none\">".concat(ajax.responseText, "</div>"); // Set spritesheet to hidden dom element
      // set up iframe content structure
      var source = "\n      <!DOCTYPE html>\n        <html>\n          <head>\n            <base href=\"".concat(host, "\" target=\"_blank\">\n            <link rel=\"stylesheet\" type=\"text/css\" href=\"").concat(host, "/css/wmcads.min.css\" />\n            <link rel=\"stylesheet\" type=\"text/css\" href=\"").concat(host, "/css/ds-website.min.css\" />\n          </head>\n          <body>\n            <div class=\"ds-p-md ds-iframe-content\">\n              ").concat(svgSprite, "\n              ").concat(html || '', "\n            </div>\n            <script src=\"https://unpkg.com/iframe-resizer@3.5.7/js/iframeResizer.contentWindow.min.js\"></script>\n            <script src=\"https://polyfill.io/v3/polyfill.min.js?features=Promise%2CObject.assign%2CString.prototype.includes%2CNumber.isNaN\"></script>\n            <script src=\"").concat(host, "/js/ds-website.min.js\"></script>\n          </body>\n        </html>\n      ");
      ifrm.contentWindow.document.open(); // Open the iframe doc to write to
      ifrm.contentWindow.document.write(source); // Put in html
      ifrm.contentWindow.document.close(); // Cloe the iframe doc

      ifrm.onload = function () {
        window.iFrameResize({
          checkOrigin: ["http:".concat(host), "https:".concat(host)]
        }, ifrm);
      }; // When the iframe has loaded then run resize function to give correct height/width, checkOrigin is an array that contains the allow hosts that can change the iframe
    };

    return ifrm;
  });
};
/* harmony default export */ __webpack_exports__["default"] = (componentExampleIframe);

/***/ }),

/***/ "./src/www/_partials/component-example/_component-example-script.js":
/*!**************************************************************************!*\
  !*** ./src/www/_partials/component-example/_component-example-script.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// The commented out code below is for compiling ES6 to ES5 in the browser. Commented out for now as it doesn't work great in IE11
// import * as babel from '@babel/standalone';

var componentExampleScript = function componentExampleScript() {
  var exampleScripts = document.querySelectorAll('.ds-website-code-example__js'); // Get all code examples that have the js tab enabled

  exampleScripts.forEach(function (exampleScript) {
    var parentEle = exampleScript; // get parent element for easier querying
    var scriptTag = parentEle.querySelector('script').innerHTML; // Grab our javascript from the hidden script tag

    // Func to replace special chars with nice html chars
    var escapeCharacters = function escapeCharacters(str) {
      return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#039;').replace('<br>', '<br />').trim();
    };
    var escapeCharScriptES6 = escapeCharacters(scriptTag); // Run our code through the escaper func

    // *** BABEL COMPILER ES6 => ES5 (TURNED OFF DUE TO IE11 ISSUE) ***
    // compile fn
    // const compileJs = input => babel.transform(input, { presets: ['env'] }).code;
    // const escapedCharScriptES5 = escapeCharacters(compileJs(scriptTag));

    // parentEle.querySelector('.ds-details--js .js').innerHTML = escapedCharScriptES5;

    // *** END BABEL ES6 => ES5 ***

    parentEle.querySelector('.ds-details--es6 .js').innerHTML = escapeCharScriptES6; // The find the es6 pre/code block and drop our formatted code in there
  });
};

/* harmony default export */ __webpack_exports__["default"] = (componentExampleScript);

/***/ }),

/***/ "./src/www/_partials/component-example/_component-example.js":
/*!*******************************************************************!*\
  !*** ./src/www/_partials/component-example/_component-example.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var seeExampleFullScreen = function seeExampleFullScreen() {
  var fullScreenBtns = document.querySelectorAll('.ds-website-code-example__view-fullscreen');
  var style = document.documentElement.style;
  fullScreenBtns.forEach(function (btn) {
    var btnEle = btn; // Grab ele of btn and map to const to avoid mutation
    var codeExampleDiv = btnEle.parentElement; // Get parent div of button (inner wrap)

    // Func on what to do when closing full screen
    var closeFullScreen = function closeFullScreen() {
      codeExampleDiv.classList.remove('ds-website-code-example--fullscreen'); // Remove full screen class
      btnEle.innerHTML = 'See this example in fullscreen'; // Change button text
      style.overflow = 'initial'; // Set body overflow back to initial, so we enable scrolling again
      style.overscrollBehaviorY = 'initial'; // Enables pull down to refresh in chrome on android
    };

    // Func to handle what to do when keys are pressed
    var handleFullScreenKeyDown = function handleFullScreenKeyDown(e) {
      var focusableElements = 'button, [href], input, select, textarea, details, summary'; // Element we want to track

      var firstFocusableElement = codeExampleDiv.querySelectorAll(focusableElements)[0]; // Get first element to be focused
      var focusableContent = codeExampleDiv.querySelectorAll(focusableElements); // Get all focusable elements
      var lastFocusableElement = focusableContent[focusableContent.length - 1]; // Get last element to be focused

      var isTabPressed = e.key === 'Tab' || e.keyCode === 9; // Map to tab key
      var isEscPressed = e.key === 'Esc' || e.key === 'Escape' || e.keyCode === 27; // Map to esc key

      // If tabe or esc is not pressed then break out of func
      if (!isTabPressed && !isEscPressed) {
        return;
      }

      // If escape key pressed
      if (isEscPressed) {
        closeFullScreen();
        document.removeEventListener('keydown', handleFullScreenKeyDown); // Remove listener as we want to go back to normal keyboard events
      }
      // else if shift key pressed for shift + tab combination
      else if (e.shiftKey) {
        // if focused has reached to first focusable element then focus last focusable element after pressing shift + tab
        if (document.activeElement === firstFocusableElement) {
          e.preventDefault();
          lastFocusableElement.focus(); // add focus for the last focusable element
        }
      }
      // if tab key is pressed
      else if (document.activeElement === lastFocusableElement) {
        e.preventDefault();
        // if focused has reached to last focusable element then focus first focusable element after pressing tab
        firstFocusableElement.focus(); // add focus for the first focusable element
      }
    };

    // Func to handle click of btn
    var handleClick = function handleClick() {
      // Func on what to do when opening full screen
      var openFullScreen = function openFullScreen() {
        codeExampleDiv.classList.add('ds-website-code-example--fullscreen'); // Add full screen class
        btnEle.innerHTML = 'Close this fullscreen example'; // Change button text
        style.overflow = 'hidden'; // Set body overflow to hidden, so we don't snap to body scrollbar
        style.overscrollBehaviorY = 'none'; // Stops pull down to refresh in chrome on android
        document.addEventListener('keydown', handleFullScreenKeyDown); // Add listener to key events for full screen
      };
      // If we are in fullscreen mode
      if (codeExampleDiv.classList.contains('ds-website-code-example--fullscreen')) {
        closeFullScreen(); // Close full screen
        document.removeEventListener('keydown', handleFullScreenKeyDown); /// Remove listener as we want to go back to normal keyboard events
      }
      // Else we want to go into fullscreen mode
      else {
        openFullScreen();
      }
    };
    btnEle.addEventListener('click', handleClick);
  });
};
var componentExample = function componentExample() {
  var _window = window,
    hljs = _window.hljs; // declare higlightJS as global var
  document.querySelectorAll('pre code').forEach(function (element) {
    // Run highlightJS for each pre code element found */
    return hljs.highlightBlock(element);
  });
  seeExampleFullScreen();
};
/* harmony default export */ __webpack_exports__["default"] = (componentExample);

/***/ }),

/***/ "./src/www/_partials/component-example/index.js":
/*!******************************************************!*\
  !*** ./src/www/_partials/component-example/index.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   componentExample: function() { return /* reexport safe */ _component_example__WEBPACK_IMPORTED_MODULE_0__["default"]; },
/* harmony export */   componentExampleIframe: function() { return /* reexport safe */ _component_example_iframe__WEBPACK_IMPORTED_MODULE_2__["default"]; },
/* harmony export */   componentExampleScript: function() { return /* reexport safe */ _component_example_script__WEBPACK_IMPORTED_MODULE_1__["default"]; }
/* harmony export */ });
/* harmony import */ var _component_example__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_component-example */ "./src/www/_partials/component-example/_component-example.js");
/* harmony import */ var _component_example_script__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_component-example-script */ "./src/www/_partials/component-example/_component-example-script.js");
/* harmony import */ var _component_example_iframe__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_component-example-iframe */ "./src/www/_partials/component-example/_component-example-iframe.js");





/***/ }),

/***/ "./src/www/assets/vendor/js/polyfills/details-element.js":
/*!***************************************************************!*\
  !*** ./src/www/assets/vendor/js/polyfills/details-element.js ***!
  \***************************************************************/
/***/ (function() {

/*
Details Element Polyfill 2.4.0
Copyright © 2019 Javan Makhmali
 */
(function () {
  "use strict";

  var element = document.createElement("details");
  var elementIsNative = typeof HTMLDetailsElement != "undefined" && element instanceof HTMLDetailsElement;
  var support = {
    open: "open" in element || elementIsNative,
    toggle: "ontoggle" in element
  };
  var styles = '\ndetails, summary {\n  display: block;\n}\ndetails:not([open]) > *:not(summary) {\n  display: none;\n}\nsummary::before {\n  content: "►";\n  padding-right: 0.3rem;\n  font-size: 0.6rem;\n  cursor: default;\n}\n[open] > summary::before {\n  content: "▼";\n}\n';
  var _ref = [],
    forEach = _ref.forEach,
    slice = _ref.slice;
  if (!support.open) {
    polyfillStyles();
    polyfillProperties();
    polyfillToggle();
    polyfillAccessibility();
  }
  if (support.open && !support.toggle) {
    polyfillToggleEvent();
  }
  function polyfillStyles() {
    document.head.insertAdjacentHTML("afterbegin", "<style>" + styles + "</style>");
  }
  function polyfillProperties() {
    var prototype = document.createElement("details").constructor.prototype;
    var setAttribute = prototype.setAttribute,
      removeAttribute = prototype.removeAttribute;
    var open = Object.getOwnPropertyDescriptor(prototype, "open");
    Object.defineProperties(prototype, {
      open: {
        get: function get() {
          if (this.tagName == "DETAILS") {
            return this.hasAttribute("open");
          } else {
            if (open && open.get) {
              return open.get.call(this);
            }
          }
        },
        set: function set(value) {
          if (this.tagName == "DETAILS") {
            return value ? this.setAttribute("open", "") : this.removeAttribute("open");
          } else {
            if (open && open.set) {
              return open.set.call(this, value);
            }
          }
        }
      },
      setAttribute: {
        value: function value(name, _value) {
          var _this = this;
          var call = function call() {
            return setAttribute.call(_this, name, _value);
          };
          if (name == "open" && this.tagName == "DETAILS") {
            var wasOpen = this.hasAttribute("open");
            var result = call();
            if (!wasOpen) {
              var summary = this.querySelector("summary");
              if (summary) summary.setAttribute("aria-expanded", true);
              triggerToggle(this);
            }
            return result;
          }
          return call();
        }
      },
      removeAttribute: {
        value: function value(name) {
          var _this2 = this;
          var call = function call() {
            return removeAttribute.call(_this2, name);
          };
          if (name == "open" && this.tagName == "DETAILS") {
            var wasOpen = this.hasAttribute("open");
            var result = call();
            if (wasOpen) {
              var summary = this.querySelector("summary");
              if (summary) summary.setAttribute("aria-expanded", false);
              triggerToggle(this);
            }
            return result;
          }
          return call();
        }
      }
    });
  }
  function polyfillToggle() {
    onTogglingTrigger(function (element) {
      element.hasAttribute("open") ? element.removeAttribute("open") : element.setAttribute("open", "");
    });
  }
  function polyfillToggleEvent() {
    if (window.MutationObserver) {
      new MutationObserver(function (mutations) {
        forEach.call(mutations, function (mutation) {
          var target = mutation.target,
            attributeName = mutation.attributeName;
          if (target.tagName == "DETAILS" && attributeName == "open") {
            triggerToggle(target);
          }
        });
      }).observe(document.documentElement, {
        attributes: true,
        subtree: true
      });
    } else {
      onTogglingTrigger(function (element) {
        var wasOpen = element.getAttribute("open");
        setTimeout(function () {
          var isOpen = element.getAttribute("open");
          if (wasOpen != isOpen) {
            triggerToggle(element);
          }
        }, 1);
      });
    }
  }
  function polyfillAccessibility() {
    setAccessibilityAttributes(document);
    if (window.MutationObserver) {
      new MutationObserver(function (mutations) {
        forEach.call(mutations, function (mutation) {
          forEach.call(mutation.addedNodes, setAccessibilityAttributes);
        });
      }).observe(document.documentElement, {
        subtree: true,
        childList: true
      });
    } else {
      document.addEventListener("DOMNodeInserted", function (event) {
        setAccessibilityAttributes(event.target);
      });
    }
  }
  function setAccessibilityAttributes(root) {
    findElementsWithTagName(root, "SUMMARY").forEach(function (summary) {
      var details = findClosestElementWithTagName(summary, "DETAILS");
      summary.setAttribute("aria-expanded", details.hasAttribute("open"));
      if (!summary.hasAttribute("tabindex")) summary.setAttribute("tabindex", "0");
      if (!summary.hasAttribute("role")) summary.setAttribute("role", "button");
    });
  }
  function eventIsSignificant(event) {
    return !(event.defaultPrevented || event.ctrlKey || event.metaKey || event.shiftKey || event.target.isContentEditable);
  }
  function onTogglingTrigger(callback) {
    addEventListener("click", function (event) {
      if (eventIsSignificant(event)) {
        if (event.which <= 1) {
          var element = findClosestElementWithTagName(event.target, "SUMMARY");
          if (element && element.parentNode && element.parentNode.tagName == "DETAILS") {
            callback(element.parentNode);
          }
        }
      }
    }, false);
    addEventListener("keydown", function (event) {
      if (eventIsSignificant(event)) {
        if (event.keyCode == 13 || event.keyCode == 32) {
          var element = findClosestElementWithTagName(event.target, "SUMMARY");
          if (element && element.parentNode && element.parentNode.tagName == "DETAILS") {
            callback(element.parentNode);
            event.preventDefault();
          }
        }
      }
    }, false);
  }
  function triggerToggle(element) {
    var event = document.createEvent("Event");
    event.initEvent("toggle", false, false);
    element.dispatchEvent(event);
  }
  function findElementsWithTagName(root, tagName) {
    return (root.tagName == tagName ? [root] : []).concat(typeof root.getElementsByTagName == "function" ? slice.call(root.getElementsByTagName(tagName)) : []);
  }
  function findClosestElementWithTagName(element, tagName) {
    if (typeof element.closest == "function") {
      return element.closest(tagName);
    } else {
      while (element) {
        if (element.tagName == tagName) {
          return element;
        } else {
          element = element.parentNode;
        }
      }
    }
  }
})();

/***/ }),

/***/ "./src/www/assets/vendor/js/polyfills/ie11-forEach.js":
/*!************************************************************!*\
  !*** ./src/www/assets/vendor/js/polyfills/ie11-forEach.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var forEachPolyFill = function forEachPolyFill() {
  // missing forEach on NodeList for IE11
  if (window.NodeList && !NodeList.prototype.forEach) {
    NodeList.prototype.forEach = Array.prototype.forEach;
  }
};
/* harmony default export */ __webpack_exports__["default"] = (forEachPolyFill());

/***/ }),

/***/ "./src/www/assets/vendor/js/polyfills/includes.js":
/*!********************************************************!*\
  !*** ./src/www/assets/vendor/js/polyfills/includes.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var includesPolyfill = function includesPolyfill() {
  if (!String.prototype.includes) {
    String.prototype.includes = function (search, start) {
      'use strict';

      if (search instanceof RegExp) {
        throw TypeError('first argument must not be a RegExp');
      }
      if (start === undefined) {
        start = 0;
      }
      return this.indexOf(search, start) !== -1;
    };
  }
};
/* harmony default export */ __webpack_exports__["default"] = (includesPolyfill());

/***/ }),

/***/ "./src/www/assets/vendor/js/polyfills/polyfills.js":
/*!*********************************************************!*\
  !*** ./src/www/assets/vendor/js/polyfills/polyfills.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ie11_forEach__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ie11-forEach */ "./src/www/assets/vendor/js/polyfills/ie11-forEach.js");
/* harmony import */ var _includes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./includes */ "./src/www/assets/vendor/js/polyfills/includes.js");
/* harmony import */ var _details_element__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./details-element */ "./src/www/assets/vendor/js/polyfills/details-element.js");
/* harmony import */ var _details_element__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_details_element__WEBPACK_IMPORTED_MODULE_2__);
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _details_element__WEBPACK_IMPORTED_MODULE_2__) if(__WEBPACK_IMPORT_KEY__ !== "default") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _details_element__WEBPACK_IMPORTED_MODULE_2__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
// Export * from any polyfill files in the polyfills folder
// Make sure that the file is exporting the function running like
// export default forEachPolyFill();

// This file is then included as the first import in the main ds-website.js file so our polyfills get loaded




/***/ }),

/***/ "./src/www/pages/styles/a-to-z-content-style-guide/_a-to-z-content-style-guide.js":
/*!****************************************************************************************!*\
  !*** ./src/www/pages/styles/a-to-z-content-style-guide/_a-to-z-content-style-guide.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function aToZContentStyleGuide() {
  // FUNCTIONS
  // Change accordion state
  var changeAccordionState = function changeAccordionState(accordionElem) {
    var changeStateToOpen = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var accordionBtn = accordionElem.querySelector('.ds-accordion__summary-wrapper');
    if (changeStateToOpen) {
      accordionElem.classList.add('ds-is--open');
      accordionBtn.setAttribute('aria-expanded', true);
    } else {
      accordionElem.classList.remove('ds-is--open');
      accordionBtn.setAttribute('aria-expanded', false);
    }
  };

  // Change all accordion states at once
  var changeAllAccordionStates = function changeAllAccordionStates(changeStateToOpen) {
    var accordions = document.querySelectorAll('main .ds-accordion');
    accordions.forEach(function (accordion) {
      return changeAccordionState(accordion, changeStateToOpen);
    });
  };

  // Scroll to an anchor within an accordion
  var scrollToAnchor = function scrollToAnchor(idWithHash) {
    // Check if element is on the page
    var elem = document.querySelector(idWithHash);
    if (!elem || elem.classList.contains('ds-accordion__summary-wrapper')) {
      return;
    }
    // Open accordion and scroll to element
    changeAccordionState(elem.parentElement.parentElement);
    elem.scrollIntoView();
  };

  //  Check for anchor to scroll to onload
  var scrollToAnchorOnLoad = function scrollToAnchorOnLoad() {
    if (document.location.hash) {
      scrollToAnchor(document.location.hash);
    }
  };

  //   Add event listener to all section links on the page
  var setupScrollToAnchor = function setupScrollToAnchor() {
    var anchors = document.querySelectorAll('main a[href^="#"]:not([href="#"])');
    // Loop through an add event listener
    anchors.forEach(function (anchor) {
      anchor.addEventListener('click', function (e) {
        e.preventDefault();
        scrollToAnchor(anchor.hash);
      });
    });
  };

  // Set up controls
  var setupAccordionControls = function setupAccordionControls() {
    var controls = document.querySelectorAll('main .js-accordion-controls button');
    controls.forEach(function (control) {
      control.addEventListener('click', function () {
        changeAllAccordionStates(control.classList.contains('js-accordion-controls-open'));
      });
    });
  };

  // CALL FUNCTIONS
  if (document.querySelector('#atozofstyle')) {
    scrollToAnchorOnLoad();
    setupScrollToAnchor();
    setupAccordionControls();
  }
}
/* harmony default export */ __webpack_exports__["default"] = (aToZContentStyleGuide);

/***/ }),

/***/ "./src/www/pages/styles/colour-palettes/_color-palettes.js":
/*!*****************************************************************!*\
  !*** ./src/www/pages/styles/colour-palettes/_color-palettes.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function colorPalettes() {
  var colors = document.querySelectorAll('.ds-website-color-swatch__inner');

  // Function to convert rgb to hex
  function rgb2hex(rgb) {
    var newRGB = rgb.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
    function hex(x) {
      return "0".concat(parseInt(x, 10).toString(16)).slice(-2);
    }
    return "#".concat(hex(newRGB[1])).concat(hex(newRGB[2])).concat(hex(newRGB[3]));
  }
  colors.forEach(function (swatch) {
    var ele = swatch;
    var rgbColor = getComputedStyle(swatch).backgroundColor;
    var hexColor = rgb2hex(rgbColor);
    ele.nextElementSibling.querySelector('pre code .color-hex').innerText = "color: '".concat(hexColor, "'");
  });
}
/* harmony default export */ __webpack_exports__["default"] = (colorPalettes);

/***/ }),

/***/ "./node_modules/iframe-resizer/js/iframeResizer.js":
/*!*********************************************************!*\
  !*** ./node_modules/iframe-resizer/js/iframeResizer.js ***!
  \*********************************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
 * File: iframeResizer.js
 * Desc: Force iframes to size to content.
 * Requires: iframeResizer.contentWindow.js to be loaded into the target frame.
 * Doc: https://github.com/davidjbradshaw/iframe-resizer
 * Author: David J. Bradshaw - dave@bradshaw.net
 * Contributor: Jure Mav - jure.mav@gmail.com
 * Contributor: Reed Dadoune - reed@dadoune.com
 */

// eslint-disable-next-line sonarjs/cognitive-complexity, no-shadow-restricted-names
;(function (undefined) {
  if (typeof window === 'undefined') return // don't run for server side render

  var count = 0,
    logEnabled = false,
    hiddenCheckEnabled = false,
    msgHeader = 'message',
    msgHeaderLen = msgHeader.length,
    msgId = '[iFrameSizer]', // Must match iframe msg ID
    msgIdLen = msgId.length,
    pagePosition = null,
    requestAnimationFrame = window.requestAnimationFrame,
    resetRequiredMethods = Object.freeze({
      max: 1,
      scroll: 1,
      bodyScroll: 1,
      documentElementScroll: 1
    }),
    settings = {},
    timer = null,
    defaults = Object.freeze({
      autoResize: true,
      bodyBackground: null,
      bodyMargin: null,
      bodyMarginV1: 8,
      bodyPadding: null,
      checkOrigin: true,
      inPageLinks: false,
      enablePublicMethods: true,
      heightCalculationMethod: 'bodyOffset',
      id: 'iFrameResizer',
      interval: 32,
      log: false,
      maxHeight: Infinity,
      maxWidth: Infinity,
      minHeight: 0,
      minWidth: 0,
      mouseEvents: true,
      resizeFrom: 'parent',
      scrolling: false,
      sizeHeight: true,
      sizeWidth: false,
      warningTimeout: 5000,
      tolerance: 0,
      widthCalculationMethod: 'scroll',
      onClose: function () {
        return true
      },
      onClosed: function () {},
      onInit: function () {},
      onMessage: function () {
        warn('onMessage function not defined')
      },
      onMouseEnter: function () {},
      onMouseLeave: function () {},
      onResized: function () {},
      onScroll: function () {
        return true
      }
    })

  function getMutationObserver() {
    return (
      window.MutationObserver ||
      window.WebKitMutationObserver ||
      window.MozMutationObserver
    )
  }

  function addEventListener(el, evt, func) {
    el.addEventListener(evt, func, false)
  }

  function removeEventListener(el, evt, func) {
    el.removeEventListener(evt, func, false)
  }

  function setupRequestAnimationFrame() {
    var vendors = ['moz', 'webkit', 'o', 'ms']
    var x

    // Remove vendor prefixing if prefixed and break early if not
    for (x = 0; x < vendors.length && !requestAnimationFrame; x += 1) {
      requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame']
    }

    if (requestAnimationFrame) {
      // Firefox extension content-scripts have a globalThis object that is not the same as window.
      // Binding `requestAnimationFrame` to window allows the function to work and prevents errors
      // being thrown when run in that context, and should be a no-op in every other context.
      requestAnimationFrame = requestAnimationFrame.bind(window)
    } else {
      log('setup', 'RequestAnimationFrame not supported')
    }
  }

  function getMyID(iframeId) {
    var retStr = 'Host page: ' + iframeId

    if (window.top !== window.self) {
      retStr =
        window.parentIFrame && window.parentIFrame.getId
          ? window.parentIFrame.getId() + ': ' + iframeId
          : 'Nested host page: ' + iframeId
    }

    return retStr
  }

  function formatLogHeader(iframeId) {
    return msgId + '[' + getMyID(iframeId) + ']'
  }

  function isLogEnabled(iframeId) {
    return settings[iframeId] ? settings[iframeId].log : logEnabled
  }

  function log(iframeId, msg) {
    output('log', iframeId, msg, isLogEnabled(iframeId))
  }

  function info(iframeId, msg) {
    output('info', iframeId, msg, isLogEnabled(iframeId))
  }

  function warn(iframeId, msg) {
    output('warn', iframeId, msg, true)
  }

  function output(type, iframeId, msg, enabled) {
    if (true === enabled && 'object' === typeof window.console) {
      // eslint-disable-next-line no-console
      console[type](formatLogHeader(iframeId), msg)
    }
  }

  function iFrameListener(event) {
    function resizeIFrame() {
      function resize() {
        setSize(messageData)
        setPagePosition(iframeId)
        on('onResized', messageData)
      }

      ensureInRange('Height')
      ensureInRange('Width')

      syncResize(resize, messageData, 'init')
    }

    function processMsg() {
      var data = msg.slice(msgIdLen).split(':')
      var height = data[1] ? parseInt(data[1], 10) : 0
      var iframe = settings[data[0]] && settings[data[0]].iframe
      var compStyle = getComputedStyle(iframe)

      return {
        iframe: iframe,
        id: data[0],
        height: height + getPaddingEnds(compStyle) + getBorderEnds(compStyle),
        width: data[2],
        type: data[3]
      }
    }

    function getPaddingEnds(compStyle) {
      if (compStyle.boxSizing !== 'border-box') {
        return 0
      }
      var top = compStyle.paddingTop ? parseInt(compStyle.paddingTop, 10) : 0
      var bot = compStyle.paddingBottom
        ? parseInt(compStyle.paddingBottom, 10)
        : 0
      return top + bot
    }

    function getBorderEnds(compStyle) {
      if (compStyle.boxSizing !== 'border-box') {
        return 0
      }
      var top = compStyle.borderTopWidth
        ? parseInt(compStyle.borderTopWidth, 10)
        : 0
      var bot = compStyle.borderBottomWidth
        ? parseInt(compStyle.borderBottomWidth, 10)
        : 0
      return top + bot
    }

    function ensureInRange(Dimension) {
      var max = Number(settings[iframeId]['max' + Dimension]),
        min = Number(settings[iframeId]['min' + Dimension]),
        dimension = Dimension.toLowerCase(),
        size = Number(messageData[dimension])

      log(iframeId, 'Checking ' + dimension + ' is in range ' + min + '-' + max)

      if (size < min) {
        size = min
        log(iframeId, 'Set ' + dimension + ' to min value')
      }

      if (size > max) {
        size = max
        log(iframeId, 'Set ' + dimension + ' to max value')
      }

      messageData[dimension] = '' + size
    }

    function isMessageFromIFrame() {
      function checkAllowedOrigin() {
        function checkList() {
          var i = 0,
            retCode = false

          log(
            iframeId,
            'Checking connection is from allowed list of origins: ' +
              checkOrigin
          )

          for (; i < checkOrigin.length; i++) {
            if (checkOrigin[i] === origin) {
              retCode = true
              break
            }
          }
          return retCode
        }

        function checkSingle() {
          var remoteHost = settings[iframeId] && settings[iframeId].remoteHost
          log(iframeId, 'Checking connection is from: ' + remoteHost)
          return origin === remoteHost
        }

        return checkOrigin.constructor === Array ? checkList() : checkSingle()
      }

      var origin = event.origin,
        checkOrigin = settings[iframeId] && settings[iframeId].checkOrigin

      if (checkOrigin && '' + origin !== 'null' && !checkAllowedOrigin()) {
        throw new Error(
          'Unexpected message received from: ' +
            origin +
            ' for ' +
            messageData.iframe.id +
            '. Message was: ' +
            event.data +
            '. This error can be disabled by setting the checkOrigin: false option or by providing of array of trusted domains.'
        )
      }

      return true
    }

    function isMessageForUs() {
      return (
        msgId === ('' + msg).slice(0, msgIdLen) &&
        msg.slice(msgIdLen).split(':')[0] in settings
      ) // ''+Protects against non-string msg
    }

    function isMessageFromMetaParent() {
      // Test if this message is from a parent above us. This is an ugly test, however, updating
      // the message format would break backwards compatibility.
      var retCode = messageData.type in { true: 1, false: 1, undefined: 1 }

      if (retCode) {
        log(iframeId, 'Ignoring init message from meta parent page')
      }

      return retCode
    }

    function getMsgBody(offset) {
      return msg.slice(msg.indexOf(':') + msgHeaderLen + offset)
    }

    function forwardMsgFromIFrame(msgBody) {
      log(
        iframeId,
        'onMessage passed: {iframe: ' +
          messageData.iframe.id +
          ', message: ' +
          msgBody +
          '}'
      )

      on('onMessage', {
        iframe: messageData.iframe,
        message: JSON.parse(msgBody)
      })

      log(iframeId, '--')
    }

    function getPageInfo() {
      var bodyPosition = document.body.getBoundingClientRect(),
        iFramePosition = messageData.iframe.getBoundingClientRect()

      return JSON.stringify({
        iframeHeight: iFramePosition.height,
        iframeWidth: iFramePosition.width,
        clientHeight: Math.max(
          document.documentElement.clientHeight,
          window.innerHeight || 0
        ),
        clientWidth: Math.max(
          document.documentElement.clientWidth,
          window.innerWidth || 0
        ),
        offsetTop: parseInt(iFramePosition.top - bodyPosition.top, 10),
        offsetLeft: parseInt(iFramePosition.left - bodyPosition.left, 10),
        scrollTop: window.pageYOffset,
        scrollLeft: window.pageXOffset,
        documentHeight: document.documentElement.clientHeight,
        documentWidth: document.documentElement.clientWidth,
        windowHeight: window.innerHeight,
        windowWidth: window.innerWidth
      })
    }

    function sendPageInfoToIframe(iframe, iframeId) {
      function debouncedTrigger() {
        trigger('Send Page Info', 'pageInfo:' + getPageInfo(), iframe, iframeId)
      }
      debounceFrameEvents(debouncedTrigger, 32, iframeId)
    }

    function startPageInfoMonitor() {
      function setListener(type, func) {
        function sendPageInfo() {
          if (settings[id]) {
            sendPageInfoToIframe(settings[id].iframe, id)
          } else {
            stop()
          }
        }

        ;['scroll', 'resize'].forEach(function (evt) {
          log(id, type + evt + ' listener for sendPageInfo')
          func(window, evt, sendPageInfo)
        })
      }

      function stop() {
        setListener('Remove ', removeEventListener)
      }

      function start() {
        setListener('Add ', addEventListener)
      }

      var id = iframeId // Create locally scoped copy of iFrame ID

      start()

      if (settings[id]) {
        settings[id].stopPageInfo = stop
      }
    }

    function stopPageInfoMonitor() {
      if (settings[iframeId] && settings[iframeId].stopPageInfo) {
        settings[iframeId].stopPageInfo()
        delete settings[iframeId].stopPageInfo
      }
    }

    function checkIFrameExists() {
      var retBool = true

      if (null === messageData.iframe) {
        warn(iframeId, 'IFrame (' + messageData.id + ') not found')
        retBool = false
      }
      return retBool
    }

    function getElementPosition(target) {
      var iFramePosition = target.getBoundingClientRect()

      getPagePosition(iframeId)

      return {
        x: Math.floor(Number(iFramePosition.left) + Number(pagePosition.x)),
        y: Math.floor(Number(iFramePosition.top) + Number(pagePosition.y))
      }
    }

    function scrollRequestFromChild(addOffset) {
      /* istanbul ignore next */ // Not testable in Karma
      function reposition() {
        pagePosition = newPosition
        scrollTo()
        log(iframeId, '--')
      }

      function calcOffset() {
        return {
          x: Number(messageData.width) + offset.x,
          y: Number(messageData.height) + offset.y
        }
      }

      function scrollParent() {
        if (window.parentIFrame) {
          window.parentIFrame['scrollTo' + (addOffset ? 'Offset' : '')](
            newPosition.x,
            newPosition.y
          )
        } else {
          warn(
            iframeId,
            'Unable to scroll to requested position, window.parentIFrame not found'
          )
        }
      }

      var offset = addOffset
          ? getElementPosition(messageData.iframe)
          : { x: 0, y: 0 },
        newPosition = calcOffset()

      log(
        iframeId,
        'Reposition requested from iFrame (offset x:' +
          offset.x +
          ' y:' +
          offset.y +
          ')'
      )

      if (window.top === window.self) {
        reposition()
      } else {
        scrollParent()
      }
    }

    function scrollTo() {
      if (false === on('onScroll', pagePosition)) {
        unsetPagePosition()
      } else {
        setPagePosition(iframeId)
      }
    }

    function findTarget(location) {
      function jumpToTarget() {
        var jumpPosition = getElementPosition(target)

        log(
          iframeId,
          'Moving to in page link (#' +
            hash +
            ') at x: ' +
            jumpPosition.x +
            ' y: ' +
            jumpPosition.y
        )
        pagePosition = {
          x: jumpPosition.x,
          y: jumpPosition.y
        }

        scrollTo()
        log(iframeId, '--')
      }

      function jumpToParent() {
        if (window.parentIFrame) {
          window.parentIFrame.moveToAnchor(hash)
        } else {
          log(
            iframeId,
            'In page link #' +
              hash +
              ' not found and window.parentIFrame not found'
          )
        }
      }

      var hash = location.split('#')[1] || '',
        hashData = decodeURIComponent(hash),
        target =
          document.getElementById(hashData) ||
          document.getElementsByName(hashData)[0]

      if (target) {
        jumpToTarget()
      } else if (window.top === window.self) {
        log(iframeId, 'In page link #' + hash + ' not found')
      } else {
        jumpToParent()
      }
    }

    function onMouse(event) {
      var mousePos = {}

      if (Number(messageData.width) === 0 && Number(messageData.height) === 0) {
        var data = getMsgBody(9).split(':')
        mousePos = {
          x: data[1],
          y: data[0]
        }
      } else {
        mousePos = {
          x: messageData.width,
          y: messageData.height
        }
      }

      on(event, {
        iframe: messageData.iframe,
        screenX: Number(mousePos.x),
        screenY: Number(mousePos.y),
        type: messageData.type
      })
    }

    function on(funcName, val) {
      return chkEvent(iframeId, funcName, val)
    }

    function actionMsg() {
      if (settings[iframeId] && settings[iframeId].firstRun) firstRun()

      switch (messageData.type) {
        case 'close': {
          closeIFrame(messageData.iframe)
          break
        }

        case 'message': {
          forwardMsgFromIFrame(getMsgBody(6))
          break
        }

        case 'mouseenter': {
          onMouse('onMouseEnter')
          break
        }

        case 'mouseleave': {
          onMouse('onMouseLeave')
          break
        }

        case 'autoResize': {
          settings[iframeId].autoResize = JSON.parse(getMsgBody(9))
          break
        }

        case 'scrollTo': {
          scrollRequestFromChild(false)
          break
        }

        case 'scrollToOffset': {
          scrollRequestFromChild(true)
          break
        }

        case 'pageInfo': {
          sendPageInfoToIframe(
            settings[iframeId] && settings[iframeId].iframe,
            iframeId
          )
          startPageInfoMonitor()
          break
        }

        case 'pageInfoStop': {
          stopPageInfoMonitor()
          break
        }

        case 'inPageLink': {
          findTarget(getMsgBody(9))
          break
        }

        case 'reset': {
          resetIFrame(messageData)
          break
        }

        case 'init': {
          resizeIFrame()
          on('onInit', messageData.iframe)
          break
        }

        default: {
          if (
            Number(messageData.width) === 0 &&
            Number(messageData.height) === 0
          ) {
            warn(
              'Unsupported message received (' +
                messageData.type +
                '), this is likely due to the iframe containing a later ' +
                'version of iframe-resizer than the parent page'
            )
          } else {
            resizeIFrame()
          }
        }
      }
    }

    function hasSettings(iframeId) {
      var retBool = true

      if (!settings[iframeId]) {
        retBool = false
        warn(
          messageData.type +
            ' No settings for ' +
            iframeId +
            '. Message was: ' +
            msg
        )
      }

      return retBool
    }

    function iFrameReadyMsgReceived() {
      // eslint-disable-next-line no-restricted-syntax, guard-for-in
      for (var iframeId in settings) {
        trigger(
          'iFrame requested init',
          createOutgoingMsg(iframeId),
          settings[iframeId].iframe,
          iframeId
        )
      }
    }

    function firstRun() {
      if (settings[iframeId]) {
        settings[iframeId].firstRun = false
      }
    }

    var msg = event.data,
      messageData = {},
      iframeId = null

    if ('[iFrameResizerChild]Ready' === msg) {
      iFrameReadyMsgReceived()
    } else if (isMessageForUs()) {
      messageData = processMsg()
      iframeId = messageData.id
      if (settings[iframeId]) {
        settings[iframeId].loaded = true
      }

      if (!isMessageFromMetaParent() && hasSettings(iframeId)) {
        log(iframeId, 'Received: ' + msg)

        if (checkIFrameExists() && isMessageFromIFrame()) {
          actionMsg()
        }
      }
    } else {
      info(iframeId, 'Ignored: ' + msg)
    }
  }

  function chkEvent(iframeId, funcName, val) {
    var func = null,
      retVal = null

    if (settings[iframeId]) {
      func = settings[iframeId][funcName]

      if ('function' === typeof func) {
        retVal = func(val)
      } else {
        throw new TypeError(
          funcName + ' on iFrame[' + iframeId + '] is not a function'
        )
      }
    }

    return retVal
  }

  function removeIframeListeners(iframe) {
    var iframeId = iframe.id
    delete settings[iframeId]
  }

  function closeIFrame(iframe) {
    var iframeId = iframe.id
    if (chkEvent(iframeId, 'onClose', iframeId) === false) {
      log(iframeId, 'Close iframe cancelled by onClose event')
      return
    }
    log(iframeId, 'Removing iFrame: ' + iframeId)

    try {
      // Catch race condition error with React
      if (iframe.parentNode) {
        iframe.parentNode.removeChild(iframe)
      }
    } catch (error) {
      warn(error)
    }

    chkEvent(iframeId, 'onClosed', iframeId)
    log(iframeId, '--')
    removeIframeListeners(iframe)
  }

  function getPagePosition(iframeId) {
    if (null === pagePosition) {
      pagePosition = {
        x:
          window.pageXOffset === undefined
            ? document.documentElement.scrollLeft
            : window.pageXOffset,
        y:
          window.pageYOffset === undefined
            ? document.documentElement.scrollTop
            : window.pageYOffset
      }
      log(
        iframeId,
        'Get page position: ' + pagePosition.x + ',' + pagePosition.y
      )
    }
  }

  function setPagePosition(iframeId) {
    if (null !== pagePosition) {
      window.scrollTo(pagePosition.x, pagePosition.y)
      log(
        iframeId,
        'Set page position: ' + pagePosition.x + ',' + pagePosition.y
      )
      unsetPagePosition()
    }
  }

  function unsetPagePosition() {
    pagePosition = null
  }

  function resetIFrame(messageData) {
    function reset() {
      setSize(messageData)
      trigger('reset', 'reset', messageData.iframe, messageData.id)
    }

    log(
      messageData.id,
      'Size reset requested by ' +
        ('init' === messageData.type ? 'host page' : 'iFrame')
    )
    getPagePosition(messageData.id)
    syncResize(reset, messageData, 'reset')
  }

  function setSize(messageData) {
    function setDimension(dimension) {
      if (!messageData.id) {
        log('undefined', 'messageData id not set')
        return
      }
      messageData.iframe.style[dimension] = messageData[dimension] + 'px'
      log(
        messageData.id,
        'IFrame (' +
          iframeId +
          ') ' +
          dimension +
          ' set to ' +
          messageData[dimension] +
          'px'
      )
    }

    function chkZero(dimension) {
      // FireFox sets dimension of hidden iFrames to zero.
      // So if we detect that set up an event to check for
      // when iFrame becomes visible.

      /* istanbul ignore next */ // Not testable in PhantomJS
      if (!hiddenCheckEnabled && '0' === messageData[dimension]) {
        hiddenCheckEnabled = true
        log(iframeId, 'Hidden iFrame detected, creating visibility listener')
        fixHiddenIFrames()
      }
    }

    function processDimension(dimension) {
      setDimension(dimension)
      chkZero(dimension)
    }

    var iframeId = messageData.iframe.id

    if (settings[iframeId]) {
      if (settings[iframeId].sizeHeight) {
        processDimension('height')
      }
      if (settings[iframeId].sizeWidth) {
        processDimension('width')
      }
    }
  }

  function syncResize(func, messageData, doNotSync) {
    /* istanbul ignore if */ // Not testable in PhantomJS
    if (
      doNotSync !== messageData.type &&
      requestAnimationFrame &&
      // including check for jasmine because had trouble getting spy to work in unit test using requestAnimationFrame
      !window.jasmine
    ) {
      log(messageData.id, 'Requesting animation frame')
      requestAnimationFrame(func)
    } else {
      func()
    }
  }

  function trigger(calleeMsg, msg, iframe, id, noResponseWarning) {
    function postMessageToIFrame() {
      var target = settings[id] && settings[id].targetOrigin
      log(
        id,
        '[' +
          calleeMsg +
          '] Sending msg to iframe[' +
          id +
          '] (' +
          msg +
          ') targetOrigin: ' +
          target
      )
      iframe.contentWindow.postMessage(msgId + msg, target)
    }

    function iFrameNotFound() {
      warn(id, '[' + calleeMsg + '] IFrame(' + id + ') not found')
    }

    function chkAndSend() {
      if (
        iframe &&
        'contentWindow' in iframe &&
        null !== iframe.contentWindow
      ) {
        // Null test for PhantomJS
        postMessageToIFrame()
      } else {
        iFrameNotFound()
      }
    }

    function warnOnNoResponse() {
      function warning() {
        if (settings[id] && !settings[id].loaded && !errorShown) {
          errorShown = true
          warn(
            id,
            'IFrame has not responded within ' +
              settings[id].warningTimeout / 1000 +
              ' seconds. Check iFrameResizer.contentWindow.js has been loaded in iFrame. This message can be ignored if everything is working, or you can set the warningTimeout option to a higher value or zero to suppress this warning.'
          )
        }
      }

      if (
        !!noResponseWarning &&
        settings[id] &&
        !!settings[id].warningTimeout
      ) {
        settings[id].msgTimeout = setTimeout(
          warning,
          settings[id].warningTimeout
        )
      }
    }

    var errorShown = false

    id = id || iframe.id

    if (settings[id]) {
      chkAndSend()
      warnOnNoResponse()
    }
  }

  function createOutgoingMsg(iframeId) {
    return (
      iframeId +
      ':' +
      settings[iframeId].bodyMarginV1 +
      ':' +
      settings[iframeId].sizeWidth +
      ':' +
      settings[iframeId].log +
      ':' +
      settings[iframeId].interval +
      ':' +
      settings[iframeId].enablePublicMethods +
      ':' +
      settings[iframeId].autoResize +
      ':' +
      settings[iframeId].bodyMargin +
      ':' +
      settings[iframeId].heightCalculationMethod +
      ':' +
      settings[iframeId].bodyBackground +
      ':' +
      settings[iframeId].bodyPadding +
      ':' +
      settings[iframeId].tolerance +
      ':' +
      settings[iframeId].inPageLinks +
      ':' +
      settings[iframeId].resizeFrom +
      ':' +
      settings[iframeId].widthCalculationMethod +
      ':' +
      settings[iframeId].mouseEvents
    )
  }

  function isNumber(value) {
    return typeof value === 'number'
  }

  function setupIFrame(iframe, options) {
    function setLimits() {
      function addStyle(style) {
        var styleValue = settings[iframeId][style]
        if (Infinity !== styleValue && 0 !== styleValue) {
          iframe.style[style] = isNumber(styleValue)
            ? styleValue + 'px'
            : styleValue
          log(iframeId, 'Set ' + style + ' = ' + iframe.style[style])
        }
      }

      function chkMinMax(dimension) {
        if (
          settings[iframeId]['min' + dimension] >
          settings[iframeId]['max' + dimension]
        ) {
          throw new Error(
            'Value for min' +
              dimension +
              ' can not be greater than max' +
              dimension
          )
        }
      }

      chkMinMax('Height')
      chkMinMax('Width')

      addStyle('maxHeight')
      addStyle('minHeight')
      addStyle('maxWidth')
      addStyle('minWidth')
    }

    function newId() {
      var id = (options && options.id) || defaults.id + count++
      if (null !== document.getElementById(id)) {
        id += count++
      }
      return id
    }

    function ensureHasId(iframeId) {
      if (typeof iframeId !== 'string') {
        throw new TypeError('Invaild id for iFrame. Expected String')
      }

      if ('' === iframeId) {
        // eslint-disable-next-line no-multi-assign
        iframe.id = iframeId = newId()
        logEnabled = (options || {}).log
        log(
          iframeId,
          'Added missing iframe ID: ' + iframeId + ' (' + iframe.src + ')'
        )
      }

      return iframeId
    }

    function setScrolling() {
      log(
        iframeId,
        'IFrame scrolling ' +
          (settings[iframeId] && settings[iframeId].scrolling
            ? 'enabled'
            : 'disabled') +
          ' for ' +
          iframeId
      )
      iframe.style.overflow =
        false === (settings[iframeId] && settings[iframeId].scrolling)
          ? 'hidden'
          : 'auto'
      switch (settings[iframeId] && settings[iframeId].scrolling) {
        case 'omit': {
          break
        }

        case true: {
          iframe.scrolling = 'yes'
          break
        }

        case false: {
          iframe.scrolling = 'no'
          break
        }

        default: {
          iframe.scrolling = settings[iframeId]
            ? settings[iframeId].scrolling
            : 'no'
        }
      }
    }

    // The V1 iFrame script expects an int, where as in V2 expects a CSS
    // string value such as '1px 3em', so if we have an int for V2, set V1=V2
    // and then convert V2 to a string PX value.
    function setupBodyMarginValues() {
      if (
        'number' ===
          typeof (settings[iframeId] && settings[iframeId].bodyMargin) ||
        '0' === (settings[iframeId] && settings[iframeId].bodyMargin)
      ) {
        settings[iframeId].bodyMarginV1 = settings[iframeId].bodyMargin
        settings[iframeId].bodyMargin =
          '' + settings[iframeId].bodyMargin + 'px'
      }
    }

    function checkReset() {
      // Reduce scope of firstRun to function, because IE8's JS execution
      // context stack is borked and this value gets externally
      // changed midway through running this function!!!
      var firstRun = settings[iframeId] && settings[iframeId].firstRun,
        resetRequertMethod =
          settings[iframeId] &&
          settings[iframeId].heightCalculationMethod in resetRequiredMethods

      if (!firstRun && resetRequertMethod) {
        resetIFrame({ iframe: iframe, height: 0, width: 0, type: 'init' })
      }
    }

    function setupIFrameObject() {
      if (settings[iframeId]) {
        settings[iframeId].iframe.iFrameResizer = {
          close: closeIFrame.bind(null, settings[iframeId].iframe),

          removeListeners: removeIframeListeners.bind(
            null,
            settings[iframeId].iframe
          ),

          resize: trigger.bind(
            null,
            'Window resize',
            'resize',
            settings[iframeId].iframe
          ),

          moveToAnchor: function (anchor) {
            trigger(
              'Move to anchor',
              'moveToAnchor:' + anchor,
              settings[iframeId].iframe,
              iframeId
            )
          },

          sendMessage: function (message) {
            message = JSON.stringify(message)
            trigger(
              'Send Message',
              'message:' + message,
              settings[iframeId].iframe,
              iframeId
            )
          }
        }
      }
    }

    // We have to call trigger twice, as we can not be sure if all
    // iframes have completed loading when this code runs. The
    // event listener also catches the page changing in the iFrame.
    function init(msg) {
      function iFrameLoaded() {
        trigger('iFrame.onload', msg, iframe, undefined, true)
        checkReset()
      }

      function createDestroyObserver(MutationObserver) {
        if (!iframe.parentNode) {
          return
        }

        var destroyObserver = new MutationObserver(function (mutations) {
          mutations.forEach(function (mutation) {
            var removedNodes = Array.prototype.slice.call(mutation.removedNodes) // Transform NodeList into an Array
            removedNodes.forEach(function (removedNode) {
              if (removedNode === iframe) {
                closeIFrame(iframe)
              }
            })
          })
        })
        destroyObserver.observe(iframe.parentNode, {
          childList: true
        })
      }

      var MutationObserver = getMutationObserver()
      if (MutationObserver) {
        createDestroyObserver(MutationObserver)
      }

      addEventListener(iframe, 'load', iFrameLoaded)
      trigger('init', msg, iframe, undefined, true)
    }

    function checkOptions(options) {
      if ('object' !== typeof options) {
        throw new TypeError('Options is not an object')
      }
    }

    function copyOptions(options) {
      // eslint-disable-next-line no-restricted-syntax
      for (var option in defaults) {
        if (Object.prototype.hasOwnProperty.call(defaults, option)) {
          settings[iframeId][option] = Object.prototype.hasOwnProperty.call(
            options,
            option
          )
            ? options[option]
            : defaults[option]
        }
      }
    }

    function getTargetOrigin(remoteHost) {
      return '' === remoteHost ||
        null !== remoteHost.match(/^(about:blank|javascript:|file:\/\/)/)
        ? '*'
        : remoteHost
    }

    function depricate(key) {
      var splitName = key.split('Callback')

      if (splitName.length === 2) {
        var name =
          'on' + splitName[0].charAt(0).toUpperCase() + splitName[0].slice(1)
        this[name] = this[key]
        delete this[key]
        warn(
          iframeId,
          "Deprecated: '" +
            key +
            "' has been renamed '" +
            name +
            "'. The old method will be removed in the next major version."
        )
      }
    }

    function processOptions(options) {
      options = options || {}

      settings[iframeId] = Object.create(null) // Protect against prototype attacks
      settings[iframeId].iframe = iframe
      settings[iframeId].firstRun = true
      settings[iframeId].remoteHost =
        iframe.src && iframe.src.split('/').slice(0, 3).join('/')

      checkOptions(options)
      Object.keys(options).forEach(depricate, options)
      copyOptions(options)

      if (settings[iframeId]) {
        settings[iframeId].targetOrigin =
          true === settings[iframeId].checkOrigin
            ? getTargetOrigin(settings[iframeId].remoteHost)
            : '*'
      }
    }

    function beenHere() {
      return iframeId in settings && 'iFrameResizer' in iframe
    }

    var iframeId = ensureHasId(iframe.id)

    if (beenHere()) {
      warn(iframeId, 'Ignored iFrame, already setup.')
    } else {
      processOptions(options)
      setScrolling()
      setLimits()
      setupBodyMarginValues()
      init(createOutgoingMsg(iframeId))
      setupIFrameObject()
    }
  }

  function debouce(fn, time) {
    if (null === timer) {
      timer = setTimeout(function () {
        timer = null
        fn()
      }, time)
    }
  }

  var frameTimer = {}
  function debounceFrameEvents(fn, time, frameId) {
    if (!frameTimer[frameId]) {
      frameTimer[frameId] = setTimeout(function () {
        frameTimer[frameId] = null
        fn()
      }, time)
    }
  }

  // Not testable in PhantomJS
  /* istanbul ignore next */

  function fixHiddenIFrames() {
    function checkIFrames() {
      function checkIFrame(settingId) {
        function chkDimension(dimension) {
          return (
            '0px' ===
            (settings[settingId] && settings[settingId].iframe.style[dimension])
          )
        }

        function isVisible(el) {
          return null !== el.offsetParent
        }

        if (
          settings[settingId] &&
          isVisible(settings[settingId].iframe) &&
          (chkDimension('height') || chkDimension('width'))
        ) {
          trigger(
            'Visibility change',
            'resize',
            settings[settingId].iframe,
            settingId
          )
        }
      }

      Object.keys(settings).forEach(function (key) {
        checkIFrame(key)
      })
    }

    function mutationObserved(mutations) {
      log(
        'window',
        'Mutation observed: ' + mutations[0].target + ' ' + mutations[0].type
      )
      debouce(checkIFrames, 16)
    }

    function createMutationObserver() {
      var target = document.querySelector('body'),
        config = {
          attributes: true,
          attributeOldValue: false,
          characterData: true,
          characterDataOldValue: false,
          childList: true,
          subtree: true
        },
        observer = new MutationObserver(mutationObserved)

      observer.observe(target, config)
    }

    var MutationObserver = getMutationObserver()
    if (MutationObserver) {
      createMutationObserver()
    }
  }

  function resizeIFrames(event) {
    function resize() {
      sendTriggerMsg('Window ' + event, 'resize')
    }

    log('window', 'Trigger event: ' + event)
    debouce(resize, 16)
  }

  // Not testable in PhantomJS
  /* istanbul ignore next */
  function tabVisible() {
    function resize() {
      sendTriggerMsg('Tab Visible', 'resize')
    }

    if ('hidden' !== document.visibilityState) {
      log('document', 'Trigger event: Visibility change')
      debouce(resize, 16)
    }
  }

  function sendTriggerMsg(eventName, event) {
    function isIFrameResizeEnabled(iframeId) {
      return (
        settings[iframeId] &&
        'parent' === settings[iframeId].resizeFrom &&
        settings[iframeId].autoResize &&
        !settings[iframeId].firstRun
      )
    }

    Object.keys(settings).forEach(function (iframeId) {
      if (isIFrameResizeEnabled(iframeId)) {
        trigger(eventName, event, settings[iframeId].iframe, iframeId)
      }
    })
  }

  function setupEventListeners() {
    addEventListener(window, 'message', iFrameListener)

    addEventListener(window, 'resize', function () {
      resizeIFrames('resize')
    })

    addEventListener(document, 'visibilitychange', tabVisible)

    addEventListener(document, '-webkit-visibilitychange', tabVisible)
  }

  function factory() {
    function init(options, element) {
      function chkType() {
        if (!element.tagName) {
          throw new TypeError('Object is not a valid DOM element')
        } else if ('IFRAME' !== element.tagName.toUpperCase()) {
          throw new TypeError(
            'Expected <IFRAME> tag, found <' + element.tagName + '>'
          )
        }
      }

      if (element) {
        chkType()
        setupIFrame(element, options)
        iFrames.push(element)
      }
    }

    function warnDeprecatedOptions(options) {
      if (options && options.enablePublicMethods) {
        warn(
          'enablePublicMethods option has been removed, public methods are now always available in the iFrame'
        )
      }
    }

    var iFrames

    setupRequestAnimationFrame()
    setupEventListeners()

    return function iFrameResizeF(options, target) {
      iFrames = [] // Only return iFrames past in on this call

      warnDeprecatedOptions(options)

      switch (typeof target) {
        case 'undefined':
        case 'string': {
          Array.prototype.forEach.call(
            document.querySelectorAll(target || 'iframe'),
            init.bind(undefined, options)
          )
          break
        }

        case 'object': {
          init(options, target)
          break
        }

        default: {
          throw new TypeError('Unexpected data type (' + typeof target + ')')
        }
      }

      return iFrames
    }
  }

  function createJQueryPublicMethod($) {
    if (!$.fn) {
      info('', 'Unable to bind to jQuery, it is not fully loaded.')
    } else if (!$.fn.iFrameResize) {
      $.fn.iFrameResize = function $iFrameResizeF(options) {
        function init(index, element) {
          setupIFrame(element, options)
        }

        return this.filter('iframe').each(init).end()
      }
    }
  }

  if (window.jQuery !== undefined) {
    createJQueryPublicMethod(window.jQuery)
  }

  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))
  } else {}
  window.iFrameResize = window.iFrameResize || factory()
})()


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
!function() {
"use strict";
/*!*******************************!*\
  !*** ./src/www/ds-website.js ***!
  \*******************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _assets_vendor_js_polyfills_polyfills__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assets/vendor/js/polyfills/polyfills */ "./src/www/assets/vendor/js/polyfills/polyfills.js");
/* harmony import */ var _pages_styles_colour_palettes_color_palettes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pages/styles/colour-palettes/_color-palettes */ "./src/www/pages/styles/colour-palettes/_color-palettes.js");
/* harmony import */ var _pages_styles_a_to_z_content_style_guide_a_to_z_content_style_guide__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pages/styles/a-to-z-content-style-guide/_a-to-z-content-style-guide */ "./src/www/pages/styles/a-to-z-content-style-guide/_a-to-z-content-style-guide.js");
/* harmony import */ var _wmcads_patterns_cookies_example__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../wmcads/patterns/cookies/_example */ "./src/wmcads/patterns/cookies/_example.js");
/* harmony import */ var _wmcads_patterns_header_v2_example__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../wmcads/patterns/header-v2/_example */ "./src/wmcads/patterns/header-v2/_example.js");
/* harmony import */ var _wmcads_patterns_footer_example__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../wmcads/patterns/footer/_example */ "./src/wmcads/patterns/footer/_example.js");
/* harmony import */ var _wmcads_components_accordion_example__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../wmcads/components/accordion/_example */ "./src/wmcads/components/accordion/_example.js");
/* harmony import */ var _wmcads_patterns_board_members_example__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../wmcads/patterns/board-members/_example */ "./src/wmcads/patterns/board-members/_example.js");
/* harmony import */ var _wmcads_patterns_search_search_filter_example__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../wmcads/patterns/search/search-filter/_example */ "./src/wmcads/patterns/search/search-filter/_example.js");
/* harmony import */ var _partials_component_example__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./_partials/component-example */ "./src/www/_partials/component-example/index.js");










var icons = function icons() {
  // Ajax SVG in, SVGS are referenced in app (Icon component)
  var ajax = new XMLHttpRequest();
  ajax.open('GET', 'https://cloudcdn.wmca.org.uk/designsystem/0.0.3/img/ds-icons.min.svg', true);
  ajax.send();
  ajax.onload = function () {
    var div = document.createElement('div');
    div.style.display = 'none';
    div.innerHTML = ajax.responseText;
    document.body.insertBefore(div, document.body.childNodes[0]);
  };
};
window.addEventListener('DOMContentLoaded', (_assets_vendor_js_polyfills_polyfills__WEBPACK_IMPORTED_MODULE_0__, icons(), (0,_pages_styles_a_to_z_content_style_guide_a_to_z_content_style_guide__WEBPACK_IMPORTED_MODULE_2__["default"])(), (0,_pages_styles_colour_palettes_color_palettes__WEBPACK_IMPORTED_MODULE_1__["default"])(), (0,_wmcads_patterns_header_v2_example__WEBPACK_IMPORTED_MODULE_4__["default"])(), (0,_wmcads_patterns_footer_example__WEBPACK_IMPORTED_MODULE_5__["default"])(), (0,_wmcads_components_accordion_example__WEBPACK_IMPORTED_MODULE_6__["default"])(), (0,_wmcads_patterns_board_members_example__WEBPACK_IMPORTED_MODULE_7__["default"])(), (0,_wmcads_patterns_cookies_example__WEBPACK_IMPORTED_MODULE_3__["default"])(), (0,_wmcads_patterns_search_search_filter_example__WEBPACK_IMPORTED_MODULE_8__["default"])(), (0,_partials_component_example__WEBPACK_IMPORTED_MODULE_9__.componentExampleIframe)(), (0,_partials_component_example__WEBPACK_IMPORTED_MODULE_9__.componentExampleScript)(), _partials_component_example__WEBPACK_IMPORTED_MODULE_9__.componentExample));
}();
/******/ })()
;